plugins {
    id 'fabric-loom' version '0.5-SNAPSHOT' apply false
}

group = project.maven_group

allprojects {
    apply plugin: 'fabric-loom'
    apply plugin: 'maven-publish'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    archivesBaseName = project.name
    version = project.mod_version

    sourceSets {
        testmod {
            compileClasspath += main.compileClasspath
            runtimeClasspath += main.runtimeClasspath
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:$minecraft_version"
        mappings "net.fabricmc:yarn:$yarn_mappings:v2"
        modImplementation "net.fabricmc:fabric-loader:$loader_version"
        modImplementation "net.fabricmc.fabric-api:fabric-api:$fabric_version"
    }

    afterEvaluate {
        processResources {
            inputs.property "version", project.version

            from(sourceSets.main.resources.srcDirs) {
                include "fabric.mod.json"
                expand "version": project.version
            }

            from(sourceSets.main.resources.srcDirs) {
                exclude "fabric.mod.json"
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = "sources"
        from sourceSets.main.allSource
    }

    jar {
        from "LICENSE"
    }
}

sourceSets {
    testmod
}

subprojects {
    group = "${project.maven_group}.${project.archives_base_name}"

    dependencies {
        testmodCompile sourceSets.main.output
    }
}

subprojects.each {
    compileOnly project(":${it.path}")
    remapJar.dependsOn("${it.path}:remapJar")
}

dependencies {
    afterEvaluate {
        subprojects.each {
            compile project(path: ":${it.name}")
            include project("${it.name}:")

            testmodCompile project("${it.name}:").sourceSets.testmod.output
        }
    }
}

